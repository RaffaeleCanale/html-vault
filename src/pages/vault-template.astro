---
import esbuild from 'esbuild';
import FilesList from '../components/editor/files-list/FilesList.svelte';
import Button from '../components/shared/atoms/Button.svelte';
import CogWheelSpinner from '../components/shared/atoms/CogWheelSpinner.svelte';
import ErrorHint from '../components/shared/atoms/ErrorHint.svelte';
import FormCard from '../components/shared/atoms/FormCard.svelte';
import PasswordField from '../components/shared/atoms/PasswordField.svelte';
import FileCard from '../components/shared/FileCard.svelte';
import UploadIcon from '../components/shared/icons/UploadIcon.svelte';
import Layout from '../layouts/Layout.astro';

const res = await esbuild.build({
    entryPoints: [`${process.cwd()}/src/resources/VaultTemplateScripts.ts`],
    bundle: true,
    write: false,
    minify: true,
    format: 'esm',
    target: 'es2015',
    sourcemap: false,
});
const depScript = res.outputFiles.at(0)!.text;

const icon = (UploadIcon as any).render().html;
const FileCardTemplate = (FileCard as any).render(
    {
        name: '__NAME__',
        size: 0,
        clickableDetails: true,
    },
    {
        $$slots: {
            suffix: () =>
                `<a href="__DOWNLOAD_URL__" download="__NAME__">${icon}</a>"`,
        },
    },
);

const templatesScript = `window.FileCardTemplate = '${FileCardTemplate.html.replaceAll(
    '\n',
    '',
)}';`;
console.log(FileCardTemplate.html);
---

<Layout title="HTML Vault" inlineFavicon={true}>
    <main>
        <script set:html={depScript}></script>
        <script set:html={templatesScript}></script>

        <div id="vault-form-page" class="vault-form-page">
            <FormCard>
                <h1>This vault is locked</h1>
                <PasswordField id="password" placeholder="Enter password" />
                <ErrorHint id="error" hidden>Wrong password</ErrorHint>
                <Button id="submit" type="submit">Open Vault</Button>
            </FormCard>
        </div>

        <div id="spinner-page">
            <CogWheelSpinner id="spinner" />
        </div>

        <div id="vault-viewer-page">
            <h1>Files</h1>
            <FilesList
                id="value-viewer-list"
                files={[]}
                removeFile={() => {}}
            />
        </div>

        <div id="file-preview-page">
            <div id="file-preview-container">
                <div id="file-preview"></div>
            </div>
        </div>
    </main>
</Layout>

<style is:inline>
    main {
        display: flex;
        align-items: center;
        justify-content: center;
    }

    #password,
    #error {
        animation-delay: 600ms;
    }

    #vault-form-page {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        z-index: 2;

        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
    }

    #vault-form-page .form-card {
        max-width: 40rem;
    }

    #vault-viewer-page {
        position: absolute;

        top: 0;
        left: 0;
        right: 0;
        bottom: 0;

        padding: 4rem;
        transform: translateY(100%);
        display: none;
        flex-direction: column;
    }

    :root {
        --preview-animation-duration: 300ms;
    }
    #file-preview-page {
        position: absolute;
        top: 0;
        left: 0;
        display: none;
        opacity: 0;
        animation: grow var(--preview-animation-duration) forwards;
        /* transition: left 1s, top 1s, width 1s, height 1s; */
        /* transition: all 1s; */
        /* background-color: var(--card-background); */
        /* margin: 3rem; */
        padding: 3rem;
    }
    #file-preview-page.shrink {
        /* animation: unset !important; */
        /* animation: grow 1s backwards; */
        /* animation-direction: reverse; */
        /* top: 0;
        left: 0;
        width: 100%;
        height: 100; */
        animation: shrink var(--preview-animation-duration) forwards;
    }

    @keyframes grow {
        100% {
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            opacity: 1;
        }
    }
    @keyframes shrink {
        0% {
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            opacity: 1;
        }
    }

    #file-preview-container {
        background-color: var(--card-background);

        width: 100%;
        height: 100%;
    }
</style>

<style is:inline>
    @keyframes enterDown {
        0% {
            transform: translateY(150%);
        }
        100% {
            transform: translateY(0);
        }
    }
    @keyframes exitDown {
        0% {
            transform: translateY(0);
        }
        100% {
            transform: translateY(100%);
        }
    }
    @keyframes exitUp {
        0% {
            transform: translateY(0);
        }
        100% {
            transform: translateY(-150%);
        }
    }
    @keyframes enterUp {
        0% {
            transform: translateY(-100%);
        }
        100% {
            transform: translateY(0);
        }
    }

    :root {
        --page-animation-duration: 600ms;
    }

    .--enter-up {
        display: flex !important;
        animation: enterUp var(--page-animation-duration) forwards;
    }

    .--enter-down {
        display: flex !important;
        animation: enterDown var(--page-animation-duration) forwards;
    }

    .--exit-up {
        display: flex !important;
        animation: exitUp var(--page-animation-duration) forwards;
    }

    .--exit-down {
        display: flex !important;
        animation: exitDown var(--page-animation-duration) forwards;
    }
</style>

<style is:inline>
    .--enter-down #spinner {
        animation: enterDown var(--page-animation-duration) forwards;
        animation-delay: calc(var(--page-animation-duration) / 2);
    }
    .--exit-up #spinner {
        animation: exitUp 9900ms forwards;
    }
    .--exit-down #spinner {
        animation: exitDown var(--page-animation-duration) forwards;
    }

    #spinner-page {
        position: absolute;
        padding-left: calc(50vw - min(30vh, 30vw) / 2);
        padding-top: 30vh;

        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: var(--card-background);
        transform: translateY(100%);
        display: none;
        z-index: 1;
    }

    #spinner {
        height: min(30vh, 30vw);
        width: min(30vh, 30vw);
        transform: translateY(100%);
    }
</style>

<script is:inline>
    // const vault = __VAULT_PLACEHOLDER__;
    const vault = {
        data: {
            keyOptions: {
                salt: base64ToBytes('bX1I7J6Z6jBksOrUIMwfTg=='),
                iterations: 1000000,
                keySize: 32,
            },
            iv: base64ToBytes('CrSU3UsUAWjQf6yGWIKVKA=='),
            encryptedData: base64ToBytes(
                'tJ0M9FRACXsesAvUWdYX0KfqbVdvdTg4K0C5rDplTDJB1YG5m5XXCYXK3CYnqiz8EuRIQL9Weo89qxyuDDEfAy2NEfv/Dk2xyxAN6FeAaZqrN+m8/HT5P3maMMPNB6JvYhrvGpm1TW3vtAIOPoTfGPCVY6aS0OYt2xuQTotmAd5eEvHFMOEhwEiegRclq9hNa1jn/acDBTlJK82/3CFEHOjVQYA=',
            ),
        },
    };

    document.getElementById('submit').addEventListener('click', async () => {
        decryptAndPopulateVault(vault);
    });

    if ('scrollRestoration' in history) {
        history.scrollRestoration = 'manual';
    }
</script>
